" Getting XDG paths

if empty( $XDG_STATE_HOME )
    let g:xdg_state_home = $HOME .. '/.local/state'
else
    let g:xdg_state_home = $XDG_STATE_HOME
endif

if empty( $XDG_CONFIG_HOME )
    let g:xdg_config_home = $HOME .. '/.config'
else
    let g:xdg_config_home = $XDG_CONFIG_HOME
endif

if empty( $XDG_DATA_HOME )
    let g:xdg_data_home = $HOME .. '/.local/share'
else
    let g:xdg_data_home = $XDG_DATA_HOME
endif

if has( 'nvim' )
    let &viminfofile = g:xdg_state_home . "/nviminfo"
else
    let &viminfofile = g:xdg_state_home . "/viminfo"
    let g:netrw_home= g:xdg_state_home

    function XDG_CONFIG_HOME_PATH( path, home )
        return substitute( a:path, $HOME .. "/.vim,", a:home .. "/vim,", "" )->substitute( $HOME .. "/.vim/after$", a:home .. "/vim/after", "" )
    endfunction

    exec 'set runtimepath=' . XDG_CONFIG_HOME_PATH( &runtimepath, g:xdg_config_home )
    exec 'set packpath=' . XDG_CONFIG_HOME_PATH( &packpath, g:xdg_config_home )

endif

filetype on                                                    " Auto-detect filetype
filetype plugin indent on                                    " Auto-indent

set expandtab
autocmd FileType cpp set noexpandtab
autocmd FileType make set noexpandtab

" If a system gives encoding problems, try uncommenting this.
"set encoding=utf-8

set shiftwidth=4                                            " Indent by 4 spaces
set tabstop=4                                               " 1 TAB = 4 columns
set listchars=tab:>-,trail:.,nbsp:@,extends:#               " How to display whitespaces
set list                                                    " Display whitespaces
set background=dark                                         " Contrast setting
set wrap                                                    " Wrap long lines
set showmatch                                               " Highlight matching brace
set incsearch                                               " Show incremental search results
set hlsearch                                                " Highlight search matches
set scrolloff=3                                             " Keep lines above / below cursor
set mouse=a                                                 " Mouse support all modes
set pastetoggle=<F2>                                        " 'Paste' autoformat off
set vb t_vb=                                                " Disable terminal beeps
set wildmenu                                                " Change behavior of command autocompletion
set wildoptions=pum                                         " Popup for commandline completion
"set autochdir                                               " Automatically cd to open file's directory

color murphy-mod                                            " Color scheme
syntax on                                                   " Syntax highlighting

" Ctrl-h / Ctrl-l to handle CamelCase
nnoremap <silent><C-h> :<C-u>call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
nnoremap <silent><C-l> :<C-u>call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR>
inoremap <silent><C-h> <C-o>:call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
inoremap <silent><C-l> <C-o>:call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR>

" Spellchecker: ]s - next word, zg - add good, zug - undo add, z= - suggestions
setlocal spelllang=de                                       " Language for spellcheck
"set spell                                                  " Enable spellcheck

if ! has('nvim')
    " Workaround for Gnome-Terminal bug showing >4;m escape sequence
    set keyprotocol = ""
    "if &term
    let &term = &term
    "endif

    command -nargs=0 Csplit {
        let s:filename = expand( '%:r' )
        exec 'split' s:filename .. '.cpp'
    }

    command -nargs=0 Hsplit {
        let s:filename = expand( '%:r' )
        exec 'split' s:filename .. '.h'
    }

    set cscopetag
    set cscopetagorder=1
    set cscopequickfix=s-,c-,d-,i-,t-,e-
endif

inoremap <F3> <C-o>:let &expandtab = !&expandtab<CR>

if has( 'gui_running' )
    set guifont=Monospace\ 12
    highlight Normal guibg=black guifg=green
    set lines=30 columns=120
endif

if filereadable( g:xdg_config_home .. '/vim/vimrc.local' )
    exec 'source' g:xdg_config_home .. '/vim/vimrc.local'
endif

if filereadable( g:xdg_config_home .. '/vim/vimrc.statusline' )
    exec 'source' g:xdg_config_home .. '/vim/vimrc.statusline'
endif

if filereadable( g:xdg_config_home .. '/vim/vimrc.plugins' )
    exec 'source' g:xdg_config_home .. '/vim/vimrc.plugins'
endif
