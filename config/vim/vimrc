" Getting XDG paths

if empty( $XDG_STATE_HOME )
    let s:xdg_state_home = $HOME .. '/.local/state'
else
    let s:xdg_state_home = $XDG_STATE_HOME
endif

if empty( $XDG_CONFIG_HOME )
    let s:xdg_config_home = $HOME .. '/.config'
else
    let s:xdg_config_home = $XDG_CONFIG_HOME
endif

if has( 'nvim' )
    let &viminfofile = s:xdg_state_home . "/nviminfo"
else
    let &viminfofile = s:xdg_state_home . "/viminfo"
    let g:netrw_home= s:xdg_state_home

    " Versions older than 9.1 need help with XDG layout
    function XDG_PATH( path )
        return substitute( a:path, $HOME .. "/.vim,", s:xdg_config_home .. "/vim,", "" )->substitute( $HOME .. "/.vim/after$", s:xdg_config_home .. "/vim/after", "" )
    endfunction

    exec 'set runtimepath=' . XDG_PATH( &runtimepath )
    exec 'set packpath=' . XDG_PATH( &packpath )

endif

filetype on                                                    " Auto-detect filetype
filetype plugin indent on                                    " Auto-indent

set expandtab
autocmd FileType cpp set noexpandtab
autocmd FileType make set noexpandtab

" If a system gives encoding problems, try uncommenting this.
"set encoding=utf-8

set shiftwidth=4                                            " Indent by 4 spaces
set tabstop=4                                               " 1 TAB = 4 columns
set listchars=tab:>-,trail:.,nbsp:@,extends:#               " How to display whitespaces
set list                                                    " Display whitespaces
set background=dark                                         " Contrast setting
set wrap                                                    " Wrap long lines
set showmatch                                               " Highlight matching brace
set incsearch                                               " Show incremental search results
set hlsearch                                                " Highlight search matches
set scrolloff=3                                             " Keep lines above / below cursor
set mouse=a                                                 " Mouse support all modes
set pastetoggle=<F2>                                        " 'Paste' autoformat off
set vb t_vb=                                                " Disable terminal beeps

color default                                               " Color scheme
syntax on                                                   " Syntax highlighting

" Ctrl-h / Ctrl-l to handle CamelCase
nnoremap <silent><C-h> :<C-u>call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
nnoremap <silent><C-l> :<C-u>call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR>
inoremap <silent><C-h> <C-o>:call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%^','bW')<CR>
inoremap <silent><C-l> <C-o>:call search('\<\<Bar>\U\@<=\u\<Bar>\u\ze\%(\U\&\>\@!\)\<Bar>\%$','W')<CR>

" Spellchecker: ]s - next word, zg - add good, zug - undo add, z= - suggestions
setlocal spelllang=de                                       " Language for spellcheck
"set spell                                                  " Enable spellcheck

if ! has('nvim')
    " Workaround for Gnome-Terminal bug showing >4;m escape sequence
    set keyprotocol = ""
    "if &term
    let &term = &term
    "endif

    command -nargs=0 Csplit {
        let s:filename = expand( '%:r' )
        exec 'split' s:filename .. '.cpp'
    }

    command -nargs=0 Hsplit {
        let s:filename = expand( '%:r' )
        exec 'split' s:filename .. '.h'
    }

    set cscopetag
    set cscopetagorder=1
    set cscopequickfix=s-,c-,d-,i-,t-,e-
endif

if has( 'gui_running' )
    set guifont=Monospace\ 12
    highlight Normal guibg=black guifg=green
    set lines=30 columns=120
endif

nnoremap <silent> <F8> :TlistToggle<CR>       " F8 toggles taglist
let g:Tlist_GainFocus_On_ToggleOpen = 1       " ...give focus...
let g:Tlist_Exit_OnlyWindow = 1               " ...exit if last window open...
let g:Tlist_Use_Right_Window = 1              " ...open taglist to the right...
let g:Highlight_Tag_On_BufEnter = 1           " ...highlight tag when entering buffer...
let g:Tlist_Auto_Open = 0                     " ...do not open by default...
let g:Tlist_Auto_Update = 1                   " ...update automatically...
let g:Tlist_Show_One_File = 0                 " ...show all open files...
let g:Tlist_Enable_Fold_Column = 0            " ...disable folding...
let g:Tlist_Use_SingleClick = 1               " ...enable jump-on-click...

" Settings for vim-latex (http://vim-latex.sourceforge.net)
set shellslash                                " Convert backward slashes to forward ones in filename references
set grepprg=grep\ -nH\ $*                     " Force grep to display file name even in single-file searches
let g:tex_flavor='latex'                      " Force .tex to mean LaTeX, not plain TeX
let g:Tex_SmartQuoteOpen = "``"               " Opening quote, English style (German would be "\"`")
let g:Tex_SmartQuoteClose = "''"              " Closing quote, English style (German would be "\"'")
let g:Tex_AutoFolding = 0                     " Do not fold on opening file
let g:Tex_Env_table = "\\begin{table}\<CR>\\caption{<++>}\<CR>\\label{tab:<++>}\<CR>\\begin{tabularx}{<+width+>}{<+columns+>}\<CR>\\hline\<CR><++>\<CR>\\hline\<CR>\\end{tabularx}\<CR>\\end{table}<++>"
let g:Tex_Env_list = "\\begin{lstlisting}[<++>]\<CR><++>\<CR>\\end{lstlisting}<++>"  " list<F5> gives lstlisting environment
let g:Tex_Com_list = "\\lstinline{<++>}<++>"                                         " list<F7> gives lstinline command

if filereadable( s:xdg_config_home .. '/vim/vimrc.local' )
    exec 'source' s:xdg_config_home .. '/vim/vimrc.local'
endif

if filereadable( s:xdg_config_home .. '/vim/vimrc.statusline' )
    exec 'source' s:xdg_config_home .. '/vim/vimrc.statusline'
endif

" plug.vim -- begin
call plug#begin()

" List plugins here
Plug 'tpope/vim-dispatch'
Plug 'gerw/vim-latex-suite'
Plug 'vim-scripts/taglist.vim'
Plug 'vim-scripts/a.vim'
Plug 'mhinz/vim-startify'
Plug 'kana/vim-operator-user'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'rhysd/vim-clang-format'
Plug 'DevSolar/perforce_autoopen.vim'
Plug 'neoclide/coc.nvim', {'branch' : 'release'}
Plug 'preservim/nerdtree'
Plug 'tpope/vim-fugitive'

call plug#end()
" plug.vim -- end

" vim-clang-format begin
set textwidth=0

let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format_on_insert_leave = 1
let g:clang_format#auto_formatexpr = 1
let g:clang_format#enable_fallback_style = 0

let g:startify_session_dir = s:xdg_state_home .. '/vim/session'
let g:startify_bookmarks = [ { 'p': '~/pdclib/functions/_PDCLIB' }, { 'r': '~/.config/vim/vimrc' } ]
let g:startify_files_number = 3
let g:startify_session_autoload = 1
let g:startify_change_to_dir = 0
let g:startify_session_number = 3
let g:startify_session_sort = 1
let g:startify_custom_header= 'startify#center(startify#fortune())'
let g:startify_custom_header_text = [
            \ '██╗   ██╗██╗███╗   ███╗',
            \ '██║   ██║██║████╗ ████║',
            \ '██║   ██║██║██╔████╔██║',
            \ '╚██╗ ██╔╝██║██║╚██╔╝██║',
            \ ' ╚████╔╝ ██║██║ ╚═╝ ██║',
            \ '  ╚═══╝  ╚═╝╚═╝     ╚═╝'
            \ ]
let g:startify_custom_header = startify#center( g:startify_custom_header_text )
let g:startify_relative_path = 1
let g:startify_use_env = 1

nnoremap <C-n> :NERDTreeToggle<CR>
let g:NERDTreeBookmarksFile = s:xdg_state_home .. '/nerdtree'
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeStatusline = 'NERDTree'
let g:NERDTreeWinPos = 'right'
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeNaturalSort = 1
let g:NERDTreeSortOrder = ['\/$', '*']
let g:NERDTreeSortHiddenFirst = 1

nnoremap <F3> :let &expandtab = !&expandtab<CR>

autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :ClangFormat<CR>
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
nmap <Leader>C :ClangFormatAutoToggle<CR>
" vim-clang-format end
